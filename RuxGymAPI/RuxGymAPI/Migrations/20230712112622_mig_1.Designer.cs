// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RuxGymAPI.Context;

#nullable disable

namespace RuxGymAPI.Migrations
{
    [DbContext(typeof(RuxGymDBcontext))]
    [Migration("20230712112622_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RuxGymAPI.Models.GameVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("GameVersions");
                });

            modelBuilder.Entity("RuxGymAPI.Models.OlimpiaWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OlimpiaWeeks");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PasswordCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CodeKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PasswordCodes");
                });

            modelBuilder.Entity("RuxGymAPI.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FacebookId")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsFacebookUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastConnectionDate")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerBoxing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("BoxHighScore")
                        .HasColumnType("int");

                    b.Property<ulong>("BoxPower")
                        .HasColumnType("bigint unsigned");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerBoxings");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerEnergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("EndEnergyTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PlayerCurrentEnergy")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("StartEnergyTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerEnergies");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerGymItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AbsItem")
                        .HasColumnType("int");

                    b.Property<int>("BenchPressItem")
                        .HasColumnType("int");

                    b.Property<int>("DeadLiftItem")
                        .HasColumnType("int");

                    b.Property<int>("DumbbellPressItem")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("SquatItem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerGymItems");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerPremium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("EndPremiumDay")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerPremia");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerSpinTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedSpinTime")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("SpinDateTimes");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("ALlPower")
                        .HasColumnType("float");

                    b.Property<float>("ArmPower")
                        .HasColumnType("float");

                    b.Property<float>("BackPower")
                        .HasColumnType("float");

                    b.Property<float>("ChestPower")
                        .HasColumnType("float");

                    b.Property<int>("CreatinItem")
                        .HasColumnType("int");

                    b.Property<int>("EnergyItem")
                        .HasColumnType("int");

                    b.Property<bool>("IsOlimpia")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("LegPower")
                        .HasColumnType("float");

                    b.Property<int>("OlimpiaWin")
                        .HasColumnType("int");

                    b.Property<int>("PlayerCash")
                        .HasColumnType("int");

                    b.Property<int>("PlayerDiamond")
                        .HasColumnType("int");

                    b.Property<int>("PlayerGoldTicket")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PlayerSpinCount")
                        .HasColumnType("int");

                    b.Property<int>("ProteinItem")
                        .HasColumnType("int");

                    b.Property<float>("SixpackPower")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerBoxing", b =>
                {
                    b.HasOne("RuxGymAPI.Models.Player", "Player")
                        .WithOne("PlayerBoxing")
                        .HasForeignKey("RuxGymAPI.Models.PlayerBoxing", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerEnergy", b =>
                {
                    b.HasOne("RuxGymAPI.Models.Player", "Player")
                        .WithOne("PlayerEnergy")
                        .HasForeignKey("RuxGymAPI.Models.PlayerEnergy", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerGymItem", b =>
                {
                    b.HasOne("RuxGymAPI.Models.Player", "Player")
                        .WithOne("PlayerGymItem")
                        .HasForeignKey("RuxGymAPI.Models.PlayerGymItem", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerPremium", b =>
                {
                    b.HasOne("RuxGymAPI.Models.Player", "Player")
                        .WithOne("PlayerPremium")
                        .HasForeignKey("RuxGymAPI.Models.PlayerPremium", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerSpinTime", b =>
                {
                    b.HasOne("RuxGymAPI.Models.Player", "Player")
                        .WithOne("PlayerSpinTime")
                        .HasForeignKey("RuxGymAPI.Models.PlayerSpinTime", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RuxGymAPI.Models.PlayerStat", b =>
                {
                    b.HasOne("RuxGymAPI.Models.Player", "Player")
                        .WithOne("PlayerStat")
                        .HasForeignKey("RuxGymAPI.Models.PlayerStat", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RuxGymAPI.Models.Player", b =>
                {
                    b.Navigation("PlayerBoxing")
                        .IsRequired();

                    b.Navigation("PlayerEnergy")
                        .IsRequired();

                    b.Navigation("PlayerGymItem")
                        .IsRequired();

                    b.Navigation("PlayerPremium")
                        .IsRequired();

                    b.Navigation("PlayerSpinTime")
                        .IsRequired();

                    b.Navigation("PlayerStat")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
